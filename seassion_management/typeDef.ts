/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  BookingStatusEnum: "active" | "unactive"
  SeassionStatusEnum: "ended" | "PAUSED" | "start"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Admin: { // root type
    id: number; // Int!
    username: string; // String!
  }
  AuthType: { // root type
    admin: NexusGenRootTypes['Admin']; // Admin!
    token: string; // String!
  }
  Booking: { // root type
    BookingID: number; // Int!
    QRCode: string; // String!
    Status: NexusGenEnums['BookingStatusEnum']; // BookingStatusEnum!
    allocatedTV: string; // String!
    creatorId: number; // Int!
    numberOfSessions: number; // Int!
    userName: string; // String!
  }
  Mutation: {};
  Query: {};
  Session: { // root type
    Status: NexusGenEnums['SeassionStatusEnum']; // SeassionStatusEnum!
    bookingId: number; // Int!
    id: number; // Int!
    timeRemaining: number; // Int!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Admin: { // field return type
    id: number; // Int!
    username: string; // String!
  }
  AuthType: { // field return type
    admin: NexusGenRootTypes['Admin']; // Admin!
    token: string; // String!
  }
  Booking: { // field return type
    BookingID: number; // Int!
    QRCode: string; // String!
    Status: NexusGenEnums['BookingStatusEnum']; // BookingStatusEnum!
    allocatedTV: string; // String!
    createdBy: NexusGenRootTypes['Admin'] | null; // Admin
    creatorId: number; // Int!
    numberOfSessions: number; // Int!
    userName: string; // String!
  }
  Mutation: { // field return type
    createAdmin: NexusGenRootTypes['Admin']; // Admin!
    createBooking: NexusGenRootTypes['Booking']; // Booking!
    deleteAdmin: string; // String!
    deleteBooking: NexusGenRootTypes['Booking']; // Booking!
    login: NexusGenRootTypes['AuthType']; // AuthType!
    pauseSession: NexusGenRootTypes['Session'] | null; // Session
    register: NexusGenRootTypes['AuthType']; // AuthType!
    startSession: NexusGenRootTypes['Session'] | null; // Session
    updateAdmin: NexusGenRootTypes['Admin']; // Admin!
    updateBooking: NexusGenRootTypes['Booking']; // Booking!
  }
  Query: { // field return type
    Admins: NexusGenRootTypes['Admin'][]; // [Admin!]!
    allBookings: NexusGenRootTypes['Booking'][]; // [Booking!]!
    allSession: NexusGenRootTypes['Session'][]; // [Session!]!
    bookingById: NexusGenRootTypes['Booking'] | null; // Booking
    findAdmin: NexusGenRootTypes['Admin'] | null; // Admin
    findSessionById: NexusGenRootTypes['Session'] | null; // Session
  }
  Session: { // field return type
    Status: NexusGenEnums['SeassionStatusEnum']; // SeassionStatusEnum!
    booking: NexusGenRootTypes['Booking']; // Booking!
    bookingId: number; // Int!
    endTime: string; // String!
    id: number; // Int!
    startTime: string; // String!
    timeRemaining: number; // Int!
  }
}

export interface NexusGenFieldTypeNames {
  Admin: { // field return type name
    id: 'Int'
    username: 'String'
  }
  AuthType: { // field return type name
    admin: 'Admin'
    token: 'String'
  }
  Booking: { // field return type name
    BookingID: 'Int'
    QRCode: 'String'
    Status: 'BookingStatusEnum'
    allocatedTV: 'String'
    createdBy: 'Admin'
    creatorId: 'Int'
    numberOfSessions: 'Int'
    userName: 'String'
  }
  Mutation: { // field return type name
    createAdmin: 'Admin'
    createBooking: 'Booking'
    deleteAdmin: 'String'
    deleteBooking: 'Booking'
    login: 'AuthType'
    pauseSession: 'Session'
    register: 'AuthType'
    startSession: 'Session'
    updateAdmin: 'Admin'
    updateBooking: 'Booking'
  }
  Query: { // field return type name
    Admins: 'Admin'
    allBookings: 'Booking'
    allSession: 'Session'
    bookingById: 'Booking'
    findAdmin: 'Admin'
    findSessionById: 'Session'
  }
  Session: { // field return type name
    Status: 'SeassionStatusEnum'
    booking: 'Booking'
    bookingId: 'Int'
    endTime: 'String'
    id: 'Int'
    startTime: 'String'
    timeRemaining: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createAdmin: { // args
      password: string; // String!
      username: string; // String!
    }
    createBooking: { // args
      allocatedTV: string; // String!
      numberOfSessions: number; // Int!
      userName: string; // String!
    }
    deleteAdmin: { // args
      id: number; // Int!
    }
    deleteBooking: { // args
      bookingId: number; // Int!
    }
    login: { // args
      password: string; // String!
      username: string; // String!
    }
    pauseSession: { // args
      bookingId: number; // Int!
      sessionId: number; // Int!
    }
    register: { // args
      password: string; // String!
      username: string; // String!
    }
    startSession: { // args
      bookingId: number; // Int!
    }
    updateAdmin: { // args
      id: number; // Int!
      username: string; // String!
    }
    updateBooking: { // args
      bookingId: number; // Int!
      name?: string | null; // String
      numberOfSessions?: number | null; // Int
      tvAllocated?: string | null; // String
    }
  }
  Query: {
    bookingById: { // args
      id: number; // Int!
    }
    findAdmin: { // args
      id: number; // Int!
    }
    findSessionById: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}